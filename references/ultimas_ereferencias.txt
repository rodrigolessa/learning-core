https://github.com/MikeWasson/ServiceFabric-AspNetCore-Sample

https://www.technical-recipes.com/2018/using-dependency-injection-in-web-api-applications-using-unity/

https://enterprisecraftsmanship.com/posts/entity-vs-value-object-the-ultimate-list-of-differences/

https://enterprisecraftsmanship.com/posts/value-object-better-implementation/

https://medium.com/@programadriano/introdu%C3%A7%C3%A3o-ao-rabbitmq-4bfba460ad03

https://www.devmedia.com.br/introducao-ao-amqp-com-rabbitmq/33036

https://medium.com/tableless/n%C3%A3o-lance-exceptions-em-seu-dom%C3%ADnio-use-notifications-70b31f7148d3

https://www.eduardopires.net.br/2016/03/ddd-bounded-context/

https://martinfowler.com/eaaDev/EventSourcing.html

https://docs.particular.net/tutorials/nservicebus-step-by-step/2-sending-a-command/


## C Sharp Basics

Collections - Generic:

HashSet<T> Classe
HashSet<int> evenNumbers = new HashSet<int>();

https://stackoverflow.com/questions/150750/hashset-vs-list-performance

### Tipos Thread-safe:

ImmutableList<T> Classe
public const ImmutableList<string> ListaDeTiposValidosParaMarcaNominativa = ImmutableList<string>(new string[] { "N", "M", "T" });

ConcurrentBag<T> Class
ConcurrentBag<int> cb = new ConcurrentBag<int>();

Some of the concurrent collection types use lightweight synchronization mechanisms such as SpinLock, SpinWait, SemaphoreSlim, and CountdownEvent. These synchronization types typically use busy spinning (spinning vs. blocking) for brief periods before they put the thread into a true Wait state. Spinning is far less computationally expensive than waiting, which involves an expensive kernel transition.

The ConcurrentQueue<T> and ConcurrentStack<T> classes do not use locks at all. Instead, they rely on Interlocked operations to achieve thread-safety.


## 

bugfix/[0-9]{4}
feature/[0-9]{4}
release/[0-9]{4}-[0-9]{2}-[0-9]{2}

##

History:
https://pt.wikipedia.org/wiki/BIOS		


